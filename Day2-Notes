# sudo su -

# cd myproject

Git reset operation:
===============================
Demo:

Create a new file --> commit on it

touch resetdemo
git add .
git commit -m "added a new file resetdemo"

Make some small modification on the file --> commit on it
Make some small modification on the file --> commit on it
Make some small modification on the file --> commit on it
Make some small modification on the file --> commit on it
Make some small modification on the file --> commit on it

Which mean I will have a very length git commit history

Every small change I have committed it

We always want a clean and crisp commit history

Git says, you can RESET your commit history

   that means:
     > we can Change the HEAD of the log
     > we can delete commit ids
     > we can move the changes from LR to Staging area
     > we can move the changes from LR to Working area
     > we can also permanently delete commits and changes in 
LR and working directory

the command is : git reset <commit id>

What is it that we have to reset, > we want to reset the HEAD to the given <commit id>

#  git reset d573778

So what about the commits before the given the <commit id> --> they will get deleted

So what about the changes we did as part of those commits?

There 3 options that can be given with git reset command


--soft:

    Observation: 
     > In the git log, the commit history is reset -> all the commits which are above the given <commitID> get deleted
     > Now the HEAD is the  <Commitid> given in the command
     > All the changes of the deleted commits will be back to staging area.


--mixed

Observation: 
 > In the git log, the commit history is reset -> all the commits which are above the given <commitID> get deleted
 > Now the HEAD is the  <Commitid> given in the command
 > All the changes of the deleted commits will be back to working directory

--hard
=============================
Observation: 
 > In the git log, the commit history is reset -> all the commits which are above the given <commitID> get deleted
 > Now the HEAD is the  <Commitid> given in the command
 > All the changes of the deleted commits will also be permanently deleted



# git log --oneline

Select the commit id which is at the bottom of your log.



# git reset --hard <commit id>

Example : git reset --hard 04f432e

============================================
GIT stash:
=====================================

If you have some incomplete changes in working directory



Incomplete Changes: Files with some modifications in it, These changes are still in Working directory and not staged or committed

I don't wish to discard the changes -> because we cannot recover them back.

I don’t wish to commit them → 

I wish to temporarily store  these changes in a different location other than working directory

We can  execute a git stash command for this.


# git status

# git ls-files

Pick up any file other than .gitignore


# vim index1.html

Press i


Insert some content


Save the file 

Press ESC key
:wq!


OR

# echo "hello All"  >> index1.html


# git status


# git stash 

With this all the modifications that are in working directory will be stashed

How can we see out stashed changes

# git stash list



Here:
stash@{0} : it is the temporary location where the stash is stored

What is there in the stash stash@{0}

# git show stash@{0}

OR

If you want to see in the .git folder

# cat .git/refs/stash

You will get the stash id

# git show <stashID>



Get the changes back to the working directory:
=====================================

#  git stash pop stash@{0}


Changes will be back to working directory, stash will be dropped

======================================

Suppose we have multiple files in the working directory with status as modified


# git ls-files

Select few files

# echo "hello All"  >>  index1.html

# echo "hello All"  >>  index2.html


# git stash -p

Select y to add those changes to stash and n to not add the changes to stash

# git stash list


Among multiple changes if we have to send only 1 file changes to stash

# git stash push filename


This is for your information -> Extra commands in stash …No need to execute them
===========================================

Changes in working directory and changes in staging area

Git stash command will stash staged as well as unstaged files

Changes in working directory and untracked file(new file)


If we give git stash → only modified files will be stashed.. New file remain in working directory

 the untracked file should also be stashed  → how to do that?

For this we have to give option : -u or  --include-untracked


git stash -> will only stash modified files
git stash -u → modified and untracked file
git stash --all → all files in working directory

git stash show --include-untracked  -> shows untracked file








