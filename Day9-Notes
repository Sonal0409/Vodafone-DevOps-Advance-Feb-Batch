Counrse End project - Kubernetes

# vim project2.yml


---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql-wordpress
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    app: mysql-wordpress
    product: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql-wordpress
spec:
  selector:
    matchLabels:
      app: mysql-wordpress
      product: mysql
  template:
    metadata:
      labels:
        app: mysql-wordpress
        product: mysql
    spec:
      containers:
      - image: mysql
        name: mysql-container
        env:
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_ROOT_PASSWORD
          value: password


---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: mysql-wordpress
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: mysql-wordpress
    tier: frontend
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: mysql-wordpress
spec:
  selector:
    matchLabels:
      app: mysql-wordpress
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql-wordpress
        tier: frontend
    spec:
      containers:
      - image: wordpress
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: root
        - name: WORDPRESS_DB_PASSWORD
          value: password

Save the file.

Exeucte the command:

kubectl create -f project2.yml

kubectl get deployment -o wide
kubectl get svc
kubectl get endpoints
kubectl get svc

copy the nodeport and go to browser and give localhost:<nodePort>


Install Metric server in the Lab
==============================================================================
Monitoring Pods/Nodes: Metrics Server

# kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml


# wget -c  https://gist.githubusercontent.com/initcron/1a2bd25353e1faa22a0ad41ad1c01b62/raw/008e23f9fbf4d7e2cf79df1dd008de2f1db62a10/k8s-metrics-server.patch.yaml

# kubectl patch deploy metrics-server -p "$(cat k8s-metrics-server.patch.yaml)" -n kube-system

# kubectl get pods -n kube-system

# kubectl top pods

==========================================================
Deploy a Deployment object, HPA and service objetc 

# kubectl create -f https://raw.githubusercontent.com/Sonal0409/Vodafone-Kubernetes-Notes/main/Day3-Notes/hpa/hpa.yml

# kubectl get all


Open a new terminal

# sudo su -

execute below command, pls change the service Ipaddress to your cluster service IP

kubectl run -i --tty load-generator --rm --image=busybox --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://<clusterIp>:80; done"


=======================================================

ConfigMap:

=================================================

ConfigMaps
A ConfigMap is an API object used to store non-confidential data in key-value pairs. Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.
A ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.
A ConfigMap is not designed to hold large chunks of data. The data stored in a ConfigMap cannot exceed 1 MiB. If you need to store settings that are larger than this limit, you may want to consider mounting a volume or use a separate database or file service.

ConfigMap does not provide secrecy or encryption. If the data you want to store are confidential, use a Secret rather than a ConfigMap, or use additional (third party) tools to keep your data private.


Demo:
==============

Create 2 configuration file which are storing key and value


# vim dev.properties

app.env: dev
app.mem: 2048
app.url: dev.com

Save the file


# vim prod.properties

app.env: prod
app.mem: 4048
app.url: prod.com

Save the file


Now create 2 different configmaps that store the desired configuration- data

# kubectl create configmap dev-config --from-file=dev.properties

# kubectl describe configmap dev-config

# kubectl create configmap prod-config --from-file=prod.properties

# kubectl describe configmap prod-config

# kubectl get configmap


Now we will create 2 different pods from the same Image that will consume the created configmap.






# vim config-Devpod.yml

apiVersion: v1
kind: Pod
metadata:
 name: dev-pod
spec:
 containers:
  - name: c1
    image: nginx
    volumeMounts:
     - name: config-volume
       mountPath: /etc/config
 volumes:
  - name: config-volume
    configMap:
     name: dev-config



# kubectl create -f config-Devpod.yml

# kubectl exec -it dev-pod -- bash

# cd /etc/config

# ls  ⇒ you will see the dev properties



# vim conf-prodpod.yml

apiVersion: v1
kind: Pod
metadata:
 name: prod-pod
spec:
 containers:
  - name: c1
    image: nginx
    volumeMounts:
     - name: config-volume
       mountPath: /etc/config
 volumes:
  - name: config-volume
    configMap:
     name: prod-config



# kubectl create -f config-prodpod.yml

# kubectl exec -it prod-pod -- bash

# cd /etc/config

# ls  ⇒ you will see the dev properties



Now edit the existing config map for the changes to reflect in container:

#  kubectl edit configmap dev-config -o yaml

It will open a YAMl file.

Press i and make changes to the data

Save the file
Wait for few seconds and then exec into the container

# kubectl exec -it dev-pod -- bash

# cd /etc/config

# cat dev.properties

# exit
