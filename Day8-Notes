Download docker compose tool:
======================================

On the lab

# sudo su -

Docker compose is a tool to be installed on Docker host

sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version

===============

# docker rm -f $(docker ps -a)

# docker system prune --all

give y  and press enter

# mkdir mycomposefiles && cd mycomposefiles

# vim docker-compose.yml

version: '3'
services:
 db:
  image: mysql:5.7
  restart: always
  environment:
   MYSQL_ROOT_PASSWORD: password
   MYSQL_DATABASE: wordpress
   MYSQL_USER: wordpress
   MYSQL_PASSWORD: wordpress
  networks:
   - wpsite
 phpmyadmin:
  depends_on:
   - db
  image: phpmyadmin/phpmyadmin
  restart: always
  ports:
   - '8181:80'
  environment:
   PMA_HOST: db
   MYSQL_ROOT_PASSWORD: password
  networks:
   - wpsite
 Wordpress:
  depends_on:
   - db
  image: wordpress
  ports:
   - '8000:80'
  restart: always
  environment:
   WORDPRESS_DB_HOST: db:3306
   WORDPRESS_DB_USER: wordpress
   WORDPRESS_DB_PASSWORD: wordpress
   WORDPRESS_DB_NAME: wordpress
  networks:
   - wpsite
networks:
 wpsite:


Save the file.

# docker-compose up -d

# docker-compose ps

========================================================
Kubernetes:
=======================================================

vi /etc/docker/daemon.json

Press i and insert below content

{
	"exec-opts": ["native.cgroupdriver=systemd"]
}

Save the file. (:wq!)

sudo service docker restart


Step1: 

##### Initiate Kube cluster

sudo kubeadm init --ignore-preflight-errors=all


Step 2:

#### Setup the environment Variables

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config


Step 3:
## set up the  Calico network

sudo kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml


Step 4:

#### check if Kube Master is ready or not

# kubectl get nodes


Step5 : remove taint form master node of lab

# kubectl taint node ip-172-31-25-55  node-role.kubernetes.io/master:NoSchedule-

Replace with your node name in above command [ run kubectl get nodes to get the node NAME]

========================================================


# vim pod.yml

apiVersion: v1
kind: Pod
metadata:
 name: pod1
 labels:
   app: webserver
   author: sonal
spec:
 containers:
  - name: c1
    image: httpd
  - name: c2
    image: tomcat


save the file


# kubectl create -f pod.yml

# kubectl get pods
===========================================================


Services in Kubernetes:


Service: 
================
> It is also a resource in Kubernetes
> Allows communication between pods within the cluster or outside the cluster
> exposes the application of the pod to be accessed by a another Pod in the Cluster.
> Exposes the application of the pod to be accessed by an external User outside the Cluster.

Why do we need a Service resource in Kubernetes?

Problems:
=======================
> Pods should not communicate via the pod Ip address as the pod is recreated the pod Ip changes 

> Pod Could not resolve by its name -> you cannot communicate to the pod via its name

> You cannot access the pod outside the cluster -> using its PODIP or using the serviceIP 

Service resource in Kubernetes will help you overcome the Problems
=================================
Service object exposes the application of 1 pod to another pod for communication

3 types of service:
> ClusterIP : It is a service that is created when we want 2 pods to communicate within the cluster

====================================

Create Pod - nginx

# vim pod2.yml


apiVersion: v1
kind: Pod
metadata:
 name: pod2
 labels:
  app: webserver
spec:
 containers:
  - name: c1
    image: nginx

Save the file
===================================

# vim service1.yml

apiVersion: v1
kind: Service
metadata: 
 name: mysvc
spec:
 type: ClusterIP
 selector:
  app: webserver  
 ports:
 - targetPort: 80 
   port: 80  

Save the file

# kubectl create -f pod2.yml

# kubectl create -f service1.yml

# kubectl get pods -o wide

# kubectl get svc

# kubectl get endpoints


# vim testpod.yml

kind: Pod
apiVersion: v1
metadata:
 name: test-pod
spec:
 containers:
  - name: c1
    image: ubuntu
    command: ["bash", "-c", "sleep 6000"]


Save the file

# kubectl create -f testpod.yml

# kubectl get svc

# # kubectl exec -it test-pod -- bash

In the pod install curl

# apt-get update && apt-get install curl -y

# curl mysvc

give exit   => to comeout of the pod


=====================================

Service: Node Port
=============================================
Using this we can access the pod from outside the cluster i.e. from our browser.

By default:
 We cannot access pod ipaddress outside the cluster
 We cannot access the ClusterIP address outside the cluster

So we have to expose the cluster to the outside world.

For this we will create a Service of type NodePort.

A node port is  a new port mapping which is done to the service port

The node port range is 30000 to 32767

Nodeport will be a port number that will be open on every node of the cluster.

# vim service2.yml

apiVersion: v1
kind: Service
metadata: 
 name: mysvc1 
spec:
 type: NodePort
 selector:
  app: webserver  
 ports:
 - targetPort: 80  
   port: 80 



Save the file

# kubectl create -f service2.yml

# kubectl get svc

go to browser and give localhost:<nodeport>
















