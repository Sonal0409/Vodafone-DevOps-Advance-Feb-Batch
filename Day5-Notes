# sudo su -

# cd /etc/ansible

Register Variable:


# vim playbook2.yml

- name: Debug module
  hosts: webserver
  tasks:
  - name: Execute a command on the host
    command: hostname -s
    register: command_output
  - name: Print the command output 
    debug: var=command_output


Save the file (:wq!)

# ansible-playbook playbook2.yml

=======================================================
# vim playbook3.yml

- name: Install packages and create a file
  hosts: webserver
  become: true # become plugin will be used to escalate the permission of current user to root permissions
  become_user: root
  tasks:
  - name: Install git on hostserver
    package: name=git state=present
  - name: Create a file on hostserver
    file: path=/tmp/file1 state=touch


save the file (:wq!)

# ansible-playbook playbook3.yml

===================================
# vim playbook4.yml

- name: Install packages and create a file
  hosts: localhost
  become: true
  become_user: root
  vars:
   pkg_name: git
   pkg_state: present
   file_path: /tmp/file2
   file_state: touch
  tasks:
  - name: Install {{pkg_name}} on hostserver
    package: name={{pkg_name}} state={{pkg_state}}
  - name: Create a file on hostserver
    file: path={{file_path}} state={{file_state}}


save the file(:wq) press enter key


# ansible-playbook playbook4.yml

=============================================
Pass Variable values at runtime:
==========================================

ansible-playbook playbook4.yml --extra-vars pkg_name=nano
ansible-playbook playbook4.yml --extra-vars "pkg_name=php file_path=/tmp/file3"


FACT VARIABLES:
=========================

# vim playbook5.yml

- hosts: localhost
  become: true
  become_user: root
  tasks:
  - name: Install package httpd
    package: name=httpd state=present
    when: ansible_os_family == "RedHat"
  - name: Install package apache2
    package: name=apache2 state=present
    when: ansible_os_family != "RedHat"


Save the file

# ansible-playbook playbook5.yml


# vim playbook6.yml

- hosts: webserver
  tasks:
  - name: Execute a command on the host
    command: hostname -s
    when: (ansible_distribution == "CentOS" and ansible_distribution_major_version == "8") or
          (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "20")

save the file

# ansible-playbook playbook6.yml

==========================================
Deploy HTML code on Apache2 server


# vim index.html

<h1> This file is form Ansible </h1>
Deployed by Ansible controller

Save the file


# vim playbook7.yml


- name: Deploy HTML code on apache2 server
  hosts: localhost
  become: true
  vars:
   pkg_name: apache2
   dest_path: /var/www/html
  tasks:
  - name: Install a package
    package: name={{pkg_name}} state=present
  - name: Start apache2 service
    service: name={{pkg_name}} state=started
  - name: Deploy HTML code
    copy: src=index.html dest={{dest_path}}
  - name: Restart apache2 server
    service: name={{pkg_name}} state=restarted


Save the playbook and run


# ansible-playbook playbook7.yml


open the browser of the lab and give 

localhost:80


you wills ee your app deployed

=========================================
Handlers in Ansible


Update the index.html file

# echo "update .." >> index.html

# vim playbook8.yml

- name: Handlers in ansible
  hosts: localhost
  become: true
  vars:
   pkg_name: apache2
   dest_path: /var/www/html
  tasks:
  - name: Exeucte command
    command: hostname -s
    notify: Execution status
  - name: Deploy HTML code  # parent task
    copy: src=index.html dest={{dest_path}}
    notify: Restart apache2 server
  handlers: # these tasks will not exeucte by themselves
  - name: Execution status
    debug: msg="command exeucted successfully"
  - name: Restart apache2 server # child task
    service: name={{pkg_name}} state=restarted


Save the file

# ansible-playbook playbook8.yml


===================================================
Ansible Vault:
======================================

Ansible playbook cannot store data in an encrypted format

In Ansible we have a utility called as Ansible vault which can be used to store secret text or passwords in an encrypted format

These vaults are password protected.

These vaults can take input as plain text and convert them and store the data in an encrypted format

An ansible vault will use an algorithm called as AES256 to encrypt the data.

Ansible vault can also decrypt the data also.

Ansible playbook if it needs secret data, it will access the data from Ansible vault while playbook execution.
For this we also have to provide vault access and password to ansible playbook.


Demo 1: Use ansible vault to create a new Encrypted file and store it in the vault


# ansible-vault create vault1.yml
New vault password: 123
Confirm password: 123

Now file will open and enter below text

Confidential data !

Save the file


# cat vault1.yml

Demo 2: using Ansible vault command view the encrypted data

# ansible-vault view vault1.yml
Vault password : 123


Demo 3: Take an existing file with some text and encrypt it


# echo "This is secret text" > secretfile.txt

# cat secretfile.txt

# ansible-vault encrypt secretfile.txt
New Vault password: 123
Confirm New Vault password: 123
Encryption successful

# ansible-vault view secretfile.txt
Vault password: 123


Demo 4: Decrypt an encrypted file
# ansible-vault decrypt secretfile.txt


ansible-vault decrypt secretfile.txt
Vault password: 123
Decryption successful
# cat secretfile.txt
This is secret text


Execution of ansible playbook using secrets:
=====================================

# ansible-vault create secrets.yml

Enter password: 123
Confirm: 123

Enter the below variables:

username: ansible1234
password: ansible@123

Save the file

The variables are stored as encrypted data

# vim playbook-vault.yml

- name: Ansible vault secrets data
  hosts: webserver
  become: true
  vars_files:
   - secrets.yml
  tasks:
  - name: Create a user on worker nodes
    user: name={{username}} password={{password}}


Save the file

# ansible-playbook playbook-vault.yml --ask-vault-pass


===================================================
Jinja2 in Ansible
====================================================

# vim webfile.conf.j2

This file is a configuration file

This file is created at /etc directory of the system

This file consist of default paramters

Parameters_list:

hostname = {{ansible_nodename}}
IP address = {{ansible_default_ipv4["address"]}}
OS = {{ansible_os_family}}
sysadmin = {{admin_name}}

Save the file.

# vim filedemo.conf

This file is a configuration file

This file is created at /etc directory of the system

This file consist of default paramters

Parameters_list:

hostname = {{ansible_nodename}}
IP address = {{ansible_default_ipv4["address"]}}
OS = {{ansible_os_family}}
sysadmin = {{admin_name}}

Save the file


# vim playbookJinja2.yml

- name: Jinja2 Templates
  hosts: webserver
  become: true
  vars:
   admin_name: Ansible_admin
  tasks:
  - name: Copy a file using copy module
    copy: src=filedemo.conf dest=/etc
  - name: Copy a jinja2 file using template module
    template: src=webfile.conf.j2 dest=/etc/webfile.conf

Save the file and exeucte the playbook

Validate: 

# cat /etc/filedemo.conf

# cat /etc/webfile.conf













