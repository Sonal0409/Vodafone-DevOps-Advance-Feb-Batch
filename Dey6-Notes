Ansible Roles:

==============================================

# sudo su -

# cd /etc/ansible

# cd roles

Create a role apache using ansible-galaxy

#  ansible-galaxy init apache

# cd apache

Delete the directory that  are not needed for this scenario

# rm -rf README.md meta tests

# sudo vim tasks/main.yml

  - name: Install apache2
    package: name={{pkg_name}} state=present
  - name: Start the apache2 server
    service: name={{pkg_name}} state=started
  - name: Copy the html code on apache2 server
    template: src=index.html.j2 dest={{dest_path}}
    notify: Restart Server


Save the file

Write the vars section for the playbook:
=========================
# sudo vim vars/main.yml

Press i to insert
pkg_name: apache2
dest_path: /var/www/html/index.html
email:
 - admin@gmail.com
 - ansible@gmail.com
 - admin2@gmail.com


Save the file

Write the template section:
==========================

#  sudo vim templates/index.html.j2


This is jinja2 template

The webserver is running on {{ ansible_hostname }}

# forloop in jinja2
# here email is a custome variable in playbook, which will have list of values

{% for item in email %}

The system admin contact email is: {{item}}

{% endfor %}


Save the file.

=============================
Enter data in handlers section
=============================

# sudo vim handlers/main.yml

  - name: Print a message
    debug: msg="apt-get repo Update complete"
  - name: Restart Server
    service: name={{pkg_name}} state=restarted



Save the file.

===============================

After this come out in the directory where you are writing playbooks

Note: the playbook that is calling the role is written in directory other than Roles directory


Execute the command

# cd

# cd /etc/ansible

# vim playbookRole1.yml


- hosts: webserver
  become: true
  roles:
   - apache


Save the file

Execute the playbook, which inturn executes the role.


For your information:

https://github.com/Sonal0409/AnsibleRolesDemo/tree/master/roles



Install terraform on lab:




sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

sudo apt update
sudo apt-get install terraform


======================================


Create accesskey and secret key

In AWS 

IAM > Users > click on add user > give a username > click next > select Attach policies directly > select AdministratorAccess below >> click on next > click on create user.

Now lets attach access key and secret key to the user.

Click on username>> click on security credentials > Select Access keys> click on create access key
 > sleect Command Line Interface (CLI)
> click on I understand the above recommendation and want to proceed to create an access key. > press next > click on create access key


go to lab terminal:
======================

# mkdir myterraformfiles

# cd myterraformfiles

# vim aws_infra.tf

provider "aws" {
  region     = "us-east-1"
   shared_credentials_files = ["~/.aws/credentials"]

}


Save the file (:wq)

# terraform init

Add the below code in the file:

# vim aws_infra.tf

resource "aws_instance" "myec2" {
  ami           = "ami-053a45fff0a704a47"
  instance_type = "t2.micro"

  tags = {
    Name = "instance-1"
  }
}

Save the file

# terraform validate

# terraform plan

# terraform apply --auto-approve

Destroy the created infrastructure

# terraform destroy --auto-approve

Data block in the terraform file:


add this block in between provider and resource block

# vim aws_infra.tf



data "aws_ami" "myami" {
  most_recent = true

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
 }

  owners = ["amazon"]
}


Save the file

# terraform plan

Full terraform file:
======================================

provider "aws" {
  region     = "us-east-1"
   shared_credentials_files = ["~/.aws/credentials"]

}

data "aws_ami" "myami" {
  most_recent = true

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
 }

  owners = ["amazon"]
}

resource "aws_instance" "myec2" {
  ami           = data.aws_ami.myami.id
  instance_type = "t2.micro"

  tags = {
    Name = "instance-1"
  }
}

===================================
Variables and Dynamic block (for_each loop) in terraform

# vim aws_sg.tf

variable "sg_ports"{
 type = list(number)
 default = [8080,80,9090,22,443]
}

variable "cidr"{
 type = list
 default = ["0.0.0.0/0","10.0.0.0/16"]
}
resource "aws_security_group" "mysg" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"
 dynamic  ingress {
    for_each = var.sg_ports
    iterator = port
    content{
    from_port        = port.value
    to_port          = port.value
    protocol         = "-1"
    cidr_blocks      = [var.cidr[0]]
  }
}
}

Save the file(:wq)

# terraform plan


===================================================
Terraform Modules:
=========================================
Modules in terraform are nothing but collection of terraform configuration files that are written in dedicated directories

Modules encapsulates group of resources, variables, output block than this modules can be called again and again to create infrastructure in different directories
In a team one can create modules of various resources and other team members can reuse the module for infra creation.

Modules are reusable terraform code.

There are various types of modules:
Root module
Child modules [these are sources in the main.tf file]
Local modules - modules that you write in your local machine and reuse them in your local machine itself 
Published modules - modules that are available for free on terraform registry written terraform team
You can also push your local module code to VCS where others can use it. -> published Modules.

A typical module directory consist : 
> TF config file
> variables.tf
> output.tf
> README.md
==============================================
Demo:
===============================================

# cd

# mkdir modules dev prod

# cd modules

#  mkdir myec2     ⇒ this is a module name

# cd myec2

# vim myec2.tf


data "aws_ami" "myami" {

  most_recent = true

  owners = ["amazon"]

  filter{
    name = "name"
    values = ["amzn2-ami-hvm*"]
}

}


resource "aws_instance" "test-ec2" {

ami = data.aws_ami.myami.id

instance_type = var.instance_type

  tags = {
    Name = "Instance-test"
  }


}
Save the file,

# vim variables.tf

variable "instance_type" {
default = "t2.micro"
}


Save the file

Copy the path of directory

/root/modules/myec2


Now come out of current directory

# cd ..

# mkdir mysg     ⇒ this module name 2

# cd mysg

# vim mysg.tf

Add this block



resource "aws_security_group" "mysg" {
  name   = "sl-sg"

    dynamic "ingress" {
    for_each = var.sg_ports
    iterator = port
   content{
   from_port = port.value
   to_port = port.value
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
}
}


}


Save the file


# vim variables.tf

variable "sg_ports" {

type = list(number)

default = [8282,8080,9090,80,8181]

}

Save the file

Copy the path of this module:
/root/modules/mysg

# ls

You will see 2 modules in the current directory.

Now lets call or use the modules in the TF config file:
======================
# cd

# cd dev

# vim main.tf

provider "aws" {
  region = "us-east-1"
  shared_credentials_files =  ["~/.aws/credentials"]
}


module "myec2module" {

source = "/root/modules/myec2"


}

module "mysgmodule" {

source = "/root/modules/mysg"

}


Save the file


# terraform init
This will download the modules in current directory
# terraform plan





