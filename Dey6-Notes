Ansible Roles:

==============================================

# sudo su -

# cd /etc/ansible

# cd roles

Create a role apache using ansible-galaxy

#  ansible-galaxy init apache

# cd apache

Delete the directory that  are not needed for this scenario

# rm -rf README.md meta tests

# sudo vim tasks/main.yml

  - name: Install apache2
    package: name={{pkg_name}} state=present
  - name: Start the apache2 server
    service: name={{pkg_name}} state=started
  - name: Copy the html code on apache2 server
    template: src=index.html.j2 dest={{dest_path}}
    notify: Restart Server


Save the file

Write the vars section for the playbook:
=========================
# sudo vim vars/main.yml

Press i to insert
pkg_name: apache2
dest_path: /var/www/html/index.html
email:
 - admin@gmail.com
 - ansible@gmail.com
 - admin2@gmail.com


Save the file

Write the template section:
==========================

#  sudo vim templates/index.html.j2


This is jinja2 template

The webserver is running on {{ ansible_hostname }}

# forloop in jinja2
# here email is a custome variable in playbook, which will have list of values

{% for item in email %}

The system admin contact email is: {{item}}

{% endfor %}


Save the file.

=============================
Enter data in handlers section
=============================

# sudo vim handlers/main.yml

  - name: Print a message
    debug: msg="apt-get repo Update complete"
  - name: Restart Server
    service: name={{pkg_name}} state=restarted



Save the file.

===============================

After this come out in the directory where you are writing playbooks

Note: the playbook that is calling the role is written in directory other than Roles directory


Execute the command

# cd

# cd /etc/ansible

# vim playbookRole1.yml


- hosts: webserver
  become: true
  roles:
   - apache


Save the file

Execute the playbook, which inturn executes the role.


For your information:

https://github.com/Sonal0409/AnsibleRolesDemo/tree/master/roles



Install terraform on lab:




sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

sudo apt update
sudo apt-get install terraform


======================================


Create accesskey and secret key

In AWS 

IAM > Users > click on add user > give a username > click next > select Attach policies directly > select AdministratorAccess below >> click on next > click on create user.

Now lets attach access key and secret key to the user.

Click on username>> click on security credentials > Select Access keys> click on create access key
 > sleect Command Line Interface (CLI)
> click on I understand the above recommendation and want to proceed to create an access key. > press next > click on create access key


go to lab terminal:
======================

# mkdir myterraformfiles

# cd myterraformfiles

# vim aws_infra.tf

provider "aws" {
  region     = "us-east-1"
   shared_credentials_files = ["~/.aws/credentials"]

}


Save the file (:wq)

# terraform init

Add the below code in the file:

# vim aws_infra.tf

resource "aws_instance" "myec2" {
  ami           = "ami-053a45fff0a704a47"
  instance_type = "t2.micro"

  tags = {
    Name = "instance-1"
  }
}

Save the file

# terraform plan

# terraform apply --auto-approve


















